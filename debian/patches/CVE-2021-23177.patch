commit fba4f123cc456d2b2538f811bb831483bf336bad
Author: Martin Matuska <martin@matuska.org>
Date:   Sat Aug 21 20:51:07 2021 +0200

    Fix handling of symbolic link ACLs
    
    On Linux ACLs on symbolic links are not supported.
    We must avoid calling acl_set_file() on symbolic links as their
    targets are modified instead.
    
    While here, do not try to set default ACLs on non-directories.
    
    Fixes #1565

Index: libarchive-3.1.2/libarchive/archive_write_disk_acl.c
===================================================================
--- libarchive-3.1.2.orig/libarchive/archive_write_disk_acl.c	2013-01-14 02:43:45.000000000 +0100
+++ libarchive-3.1.2/libarchive/archive_write_disk_acl.c	2022-02-20 14:03:28.964520189 +0100
@@ -47,7 +47,7 @@
 /* Default empty function body to satisfy mainline code. */
 int
 archive_write_disk_set_acls(struct archive *a, int fd, const char *name,
-	 struct archive_acl *abstract_acl)
+	 struct archive_acl *abstract_acl, __LA_MODE_T mode)
 {
 	(void)a; /* UNUSED */
 	(void)fd; /* UNUSED */
@@ -59,7 +59,7 @@
 #else
 
 static int	set_acl(struct archive *, int fd, const char *,
-			struct archive_acl *,
+			struct archive_acl *, __LA_MODE_T ,
 			acl_type_t, int archive_entry_acl_type, const char *tn);
 
 /*
@@ -67,20 +67,20 @@
  */
 int
 archive_write_disk_set_acls(struct archive *a, int fd, const char *name,
-	 struct archive_acl *abstract_acl)
+	 struct archive_acl *abstract_acl, __LA_MODE_T mode)
 {
 	int		 ret;
 
 	if (archive_acl_count(abstract_acl, ARCHIVE_ENTRY_ACL_TYPE_POSIX1E) > 0) {
-		ret = set_acl(a, fd, name, abstract_acl, ACL_TYPE_ACCESS,
+		ret = set_acl(a, fd, name, abstract_acl, mode, ACL_TYPE_ACCESS,
 		    ARCHIVE_ENTRY_ACL_TYPE_ACCESS, "access");
 		if (ret != ARCHIVE_OK)
 			return (ret);
-		ret = set_acl(a, fd, name, abstract_acl, ACL_TYPE_DEFAULT,
+		ret = set_acl(a, fd, name, abstract_acl, mode, ACL_TYPE_DEFAULT,
 		    ARCHIVE_ENTRY_ACL_TYPE_DEFAULT, "default");
 		return (ret);
 	} else if (archive_acl_count(abstract_acl, ARCHIVE_ENTRY_ACL_TYPE_NFS4) > 0) {
-		ret = set_acl(a, fd, name, abstract_acl, ACL_TYPE_NFS4,
+		ret = set_acl(a, fd, name, abstract_acl, mode, ACL_TYPE_NFS4,
 		    ARCHIVE_ENTRY_ACL_TYPE_NFS4, "nfs4");
 		return (ret);
 	} else
@@ -124,7 +124,7 @@
 
 static int
 set_acl(struct archive *a, int fd, const char *name,
-    struct archive_acl *abstract_acl,
+    struct archive_acl *abstract_acl, __LA_MODE_T mode,
     acl_type_t acl_type, int ae_requested_type, const char *tname)
 {
 	acl_t		 acl;
@@ -143,6 +143,19 @@
 	entries = archive_acl_reset(abstract_acl, ae_requested_type);
 	if (entries == 0)
 		return (ARCHIVE_OK);
+
+	if (S_ISLNK(mode)) {
+		/* Linux does not support ACLs on symbolic links */
+		return (ARCHIVE_OK);
+	}
+
+	if (acl_type == ACL_TYPE_DEFAULT && !S_ISDIR(mode)) {
+		errno = EINVAL;
+		archive_set_error(a, errno,
+		    "Cannot set default ACL on non-directory");
+		return (ARCHIVE_WARN);
+	}
+
 	acl = acl_init(entries);
 	while (archive_acl_next(a, abstract_acl, ae_requested_type, &ae_type,
 		   &ae_permset, &ae_tag, &ae_id, &ae_name) == ARCHIVE_OK) {
Index: libarchive-3.1.2/libarchive/archive_write_disk_posix.c
===================================================================
--- libarchive-3.1.2.orig/libarchive/archive_write_disk_posix.c	2022-02-20 13:59:53.768610541 +0100
+++ libarchive-3.1.2/libarchive/archive_write_disk_posix.c	2022-02-20 14:11:58.076318285 +0100
@@ -1665,7 +1665,8 @@
 	if (a->todo & TODO_ACLS) {
 		int r2 = archive_write_disk_set_acls(&a->archive, a->fd,
 				  archive_entry_pathname(a->entry),
-				  archive_entry_acl(a->entry));
+				  archive_entry_acl(a->entry),
+				  archive_entry_mode(a->entry));
 		if (r2 < ret) ret = r2;
 	}
 
@@ -2200,7 +2201,7 @@
 			chmod(p->name, p->mode);
 		if (p->fixup & TODO_ACLS)
 			archive_write_disk_set_acls(&a->archive,
-						    -1, p->name, &p->acl);
+						    -1, p->name, &p->acl, p->mode);
 		if (p->fixup & TODO_FFLAGS)
 			set_fflags_platform(a, -1, p->name,
 			    p->mode, p->fflags_set, 0);
Index: libarchive-3.1.2/libarchive/archive_write_disk_private.h
===================================================================
--- libarchive-3.1.2.orig/libarchive/archive_write_disk_private.h	2013-01-14 02:43:45.000000000 +0100
+++ libarchive-3.1.2/libarchive/archive_write_disk_private.h	2022-02-20 14:18:20.268185862 +0100
@@ -34,10 +34,11 @@
 #define ARCHIVE_WRITE_DISK_PRIVATE_H_INCLUDED
 
 #include "archive_acl_private.h"
+#include "archive_entry.h"
 
 struct archive_write_disk;
 
 int
-archive_write_disk_set_acls(struct archive *, int /* fd */, const char * /* pathname */, struct archive_acl *);
+archive_write_disk_set_acls(struct archive *, int /* fd */, const char * /* pathname */, struct archive_acl *, __LA_MODE_T );
 
 #endif
